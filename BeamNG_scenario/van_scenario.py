# Define all the imports

import time
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from shapely import geometry
import sys
from matplotlib.pyplot import imshow
from time import sleep
import os
import math
import csv
import itertools as it
import random

from beamngpy import BeamNGpy, Vehicle, Scenario, Road, setup_logging
from beamngpy.sensors import Electrics
from beamngpy.sensors import Camera


positions = list()
directions = list()
distance = list()
speed = {9, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23}

# Creation main road for the scenario.
# def simu(speed):
for car_speed in speed:
    my_dict = {'van_transmission': ['van_transmission_5M', 'van_transmission_4A', 'van_transmission_6A'],
               'tire_R_16x8_alt': ['tire_R_225_75_16_heavy', 'tire_R_225_75_16_standard', 'tire_R_31_12_16_offroad'],
               'brakepad_R': ['brakepad_R', 'brakepad_R_race', 'brakepad_R_sport']}
    allNames = sorted(my_dict)
    combinations = it.product(*(my_dict[Name] for Name in allNames))
    # print(list(combinations))

    for x in list(combinations):
        # Calling BeamngPY
        bng = BeamNGpy('localhost', 62240, home='C:/Beamng/trunk')

        # Create a scenario in asfault map with scenario name 'indicatorsT1'.
        scenario = Scenario('asfault', 'euroT1')

        # Properties for list of vehicles.

        original_vehicle1 = (803.1582641601562, -
                             283.4632263183594, 0.20022384822368622)
        vehicle1 = Vehicle('ego_vehicle', model='van',
                           licence='Main01', color='White')

        original_vehicle2 = (
            530.0204467773438, 8.33481502532959, 0.1997339278459549)
        vehicle2 = Vehicle('green_vehicle', model='van',
                           licence='Main02', colour='Yellow')

        # Add vehicles to our scenario at this position and rotation.

        scenario.add_vehicle(vehicle1, pos=original_vehicle1, rot=(0, 0, 90))

        scenario.add_vehicle(vehicle2, pos=original_vehicle2, rot=(0, 0, 100))
        road = Road('road_rubber_sticky', rid='main_road', texture_length=16)
        road.nodes = [
            (869.5509237188014, -295.7357435150861, 0.01, 7.9999999999999805),
            (854.895151969961, -295.8359261634828, 0.01, 8.000000000000004),
            (840.286418364192, -294.658392914346, 0.01, 8.000000000000004),
            (825.8359041852287, -292.2121055067158, 0.01, 8.000000000000012),
            (811.6535865714322, -288.51568166487283, 0.01, 7.999999999999975),
            (797.8474015233609, -283.5972534062153, 0.01, 8.000000000000039),
            (784.5224224456331, -277.4942529396198, 0.01, 8.000000000000027),
            (771.7800604748727, -270.25312778372955, 0.01, 8.000000000000021),
            (759.7172926797257, -261.9289872732918, 0.01, 7.9999999999999725),
            (748.4259240068113, -252.5851831438444, 0.01, 8.000000000000004),
            (737.9918885896456, -242.29282738675565, 0.01, 8.00000000000003),
            (728.4945957379957, -231.13025104403135, 0.01, 7.999999999999948),
            (720.006325585085, -219.1824080617875, 0.01, 8.000000000000036),
            (712.5916789921349, -206.54022873942375, 0.01, 7.999999999999959),
            (706.3070858968036, -193.29992769513996, 0.01, 8.0),
            (701.2003758472878, -179.56227161459543, 0.01, 7.999999999999917),
            (697.31041399058, -165.43181235558666, 0.01, 8.000000000000064),
            (694.666805285233, -151.01609124527928, 0.01, 8.000000000000004),
            (693.289669189749, -136.42482062577312, 0.01, 8.000000000000032),
            (693.1894865413524, -121.76904887693271, 0.01, 7.999999999999888),
            (693.1131569044787, -110.60274659210194, 0.01, 8.000000000000032),
            (692.0639103555386, -99.48558802485915, 0.01, 8.000000000000005),
            (690.0497322943219, -88.50218146462495, 0.01, 8.000000000000068),
            (687.0859518320683, -77.73611726728494, 0.01, 8.000000000000012),
            (683.1951251276753, -67.26933168210815, 0.01, 7.999999999999983),
            (678.4068637217085, -57.18148326741573, 0.01, 8.000000000000059),
            (672.7576091746989, -47.54934664085289, 0.01, 7.9999999999999325),
            (666.2903557248623, -38.44622817819089, 0.01, 8.000000000000037),
            (659.0543230759862, -29.941408107543808, 0.01, 8.00000000000003),
            (651.1045818057646, -22.099613245000015, 0.01, 8.000000000000004),
            (642.5016342454489, -14.980524384468652, 0.01, 7.9999999999999964),
            (633.310954020575, -8.638322090801779, 0.01, 7.999999999999986),
            (623.6024877571385, -3.121274352980649, 0.01, 8.000000000000028),
            (613.4501227455364, 1.5286307644254435, 0.01, 7.999999999999988),
            (602.9311246136725, 5.276004675783568, 0.01, 8.000000000000021),
            (592.1255492888752, 8.092327602902003, 0.01, 8.000000000000027),
            (581.1156337239507, 9.956165627763141, 0.01, 8.000000000000018),
            (569.9851700243172, 10.853333817581643, 0.01, 8.000000000000032),
            (558.8188677394864, 10.777004180707962, 0.01, 8.000000000000032),
            (547.7017091722437, 9.727757631767815, 0.01, 8.000000000000037),
            (536.7183026120094, 7.713579570551076, 0.01, 8.000000000000043),
            (525.9522384146694, 4.749799108297523, 0.01, 8.000000000000043),
            (515.4854528294927, 0.8589724039044881, 0.01, 7.999999999999984),
            (505.39760441480024, -3.9292890020621627, 0.01, 7.999999999999995),
            (493.73352968531213, -9.465716252711154, 0.01, 7.999999999999996),
            (481.6313088524515, -13.96448462966561, 0.01, 8.000000000000016),
            (469.1830471242771, -17.391355789146296, 0.01, 8.000000000000004),
        ]

        road.improved_spline = 0
        road.over_object = 1
        road.break_angle = 180

        # We create Divider for the scenario.

        road2 = Road('BlankWhite', rid='divider_1_1', texture_length=16)
        road2.nodes = [
            (854.895151969961, -295.8359261634828, 0.01, 0.3),
            (840.286418364192, -294.658392914346, 0.01, 0.3),
            (825.8359041852287, -292.2121055067158, 0.01, 0.3),
            (811.6535865714322, -288.51568166487283, 0.01, 0.3),
            (797.8474015233609, -283.5972534062153, 0.01, 0.3),
            (784.5224224456331, -277.4942529396198, 0.01, 0.3),
            (771.7800604748727, -270.25312778372955, 0.01, 0.3),
            (759.7172926797257, -261.9289872732918, 0.01, 0.3),
            (748.4259240068113, -252.5851831438444, 0.01, 0.3),
            (737.9918885896456, -242.29282738675565, 0.01, 0.3),
            (728.4945957379957, -231.13025104403135, 0.01, 0.3),
            (720.006325585085, -219.1824080617875, 0.01, 0.3),
            (712.5916789921349, -206.54022873942375, 0.01, 0.3),
            (706.3070858968036, -193.29992769513996, 0.01, 0.3),
            (701.2003758472878, -179.56227161459543, 0.01, 0.3),
            (697.31041399058, -165.43181235558666, 0.01, 0.3),
            (694.666805285233, -151.01609124527928, 0.01, 0.3),
            (693.289669189749, -136.42482062577312, 0.01, 0.3),
            (693.1894865413524, -121.76904887693271, 0.01, 0.3),
            (693.1131569044787, -110.60274659210194, 0.01, 0.3),
            (692.0639103555386, -99.48558802485915, 0.01, 0.3),
            (690.0497322943219, -88.50218146462495, 0.01, 0.3),
            (687.0859518320683, -77.73611726728494, 0.01, 0.3),
            (683.1951251276753, -67.26933168210815, 0.01, 0.3),
            (678.4068637217085, -57.18148326741573, 0.01, 0.3),
            (672.7576091746989, -47.54934664085289, 0.01, 0.3),
            (666.2903557248623, -38.44622817819089, 0.01, 0.3),
            (659.0543230759862, -29.941408107543808, 0.01, 0.3),
            (651.1045818057646, -22.099613245000015, 0.01, 0.3),
            (642.5016342454489, -14.980524384468652, 0.01, 0.3),
            (633.310954020575, -8.638322090801779, 0.01, 0.3),
            (623.6024877571385, -3.121274352980649, 0.01, 0.3),
            (613.4501227455364, 1.5286307644254435, 0.01, 0.3),
            (602.9311246136725, 5.276004675783568, 0.01, 0.3),
            (592.1255492888752, 8.092327602902003, 0.01, 0.3),
            (581.1156337239507, 9.956165627763141, 0.01, 0.3),
            (569.9851700243172, 10.853333817581643, 0.01, 0.3),
            (558.8188677394864, 10.777004180707962, 0.01, 0.3),
            (547.7017091722437, 9.727757631767815, 0.01, 0.3),
            (536.7183026120094, 7.713579570551076, 0.01, 0.3),
            (525.9522384146694, 4.749799108297523, 0.01, 0.3),
            (515.4854528294927, 0.8589724039044881, 0.01, 0.3),
            (505.39760441480024, -3.9292890020621627, 0.01, 0.3),
            (493.73352968531213, -9.465716252711154, 0.01, 0.3),
            (481.6313088524515, -13.96448462966561, 0.01, 0.3),
            (469.1830471242771, -17.391355789146296, 0.01, 0.3),
            (456.4834832890063, -19.72024917242819, 0.01, 0.3),
            (443.6292686956319, -20.933440494640223, 0.01, 0.3),
            (430.7182316787963, -21.021696637275436, 0.01, 0.3),
            (417.848633026095, -19.98434591779785, 0.01, 0.3),
            (405.1184181541512, -17.82928320155218, 0.01, 0.3),
            (392.62447168485426, -14.57290981707149, 0.01, 0.3),
            (380.4618800948866, -10.240008732063714, 0.01, 0.3),
            (368.72320805022173, -4.8635559400629305, 0.01, 0.3),
            (357.4977939331232, 1.51553050679275, 0.01, 0.3),
            (355.3740669379965, 2.7223846994411254, 0.01, 0.3),
            (353.1532370917085, 3.7395514438737076, 0.01, 0.3),
            (350.8522062503633, 4.5592894869832925, 0.01, 0.3),
            (348.4884866480639, 5.175360127290453, 0.01, 0.3),
            (346.0800676182367, 5.583074695228829, 0.01, 0.3),
            (343.6452786839418, 5.779330236751619, 0.01, 0.3),
            (341.20265005913507, 5.762633128685504, 0.01, 0.3),
            (338.77077162255074, 5.53311044610485, 0.01, 0.3),
            (336.3681514374995, 5.092508995213684, 0.01, 0.3),
            (334.01307489433134, 4.44418201909572, 0.01, 0.3),
            (331.72346554757394, 3.593063677509747, 0.01, 0.3),
            (329.51674870685997, 2.5456314949545362, 0.01, 0.3),
            (327.40971881979937, 1.3098570627961763, 0.01, 0.3),
            (325.418411656092, -0.10485462935560186, 0.01, 0.3),
            (323.557982265638, -1.6877367712972475, 0.01, 0.3),
            (316.3820403310295, -7.793139318786457, 0.01, 0.3),
            (308.7012841281584, -13.249884417086172, 0.01, 0.3),
            (300.57416884949606, -18.01644294112556, 0.01, 0.3),
            (292.06254674959933, -22.056538502409957, 0.01, 0.3),
            (283.23119641210644, -25.339423534241583, 0.01, 0.3),
            (274.1473297456008, -27.840113299268026, 0.01, 0.3),
            (264.88008046040324, -29.539576038419668, 0.01, 0.3),
            (255.49997791929212, -30.42487781408791, 0.01, 0.3),
            (246.07841036646613, -30.489280945200086, 0.01, 0.3),
            (236.68708161990034, -29.732295285040763, 0.01, 0.3),
            (227.3974653619954, -28.159681951564185, 0.01, 0.3),
            (218.28026118169763, -25.783409481808008, 0.01, 0.3),
            (209.4048565079375, -22.62156274409962, 0.01, 0.3),
            (200.83879852939822, -18.698205301288237, 0.01, 0.3),
            (192.64728011962362, -14.043196272501657, 0.01, 0.3),
            (184.45576170984907, -9.388187243715066, 0.01, 0.3),
            (175.88970373130977, -5.464829800903676, 0.01, 0.3),
            (167.01429905754964, -2.302983063195276, 0.01, 0.3),
            (157.89709487725187, 0.07328940656091376, 0.01, 0.3),
            (148.60747861934695, 1.645902740037501, 0.01, 0.3),
            (139.21614987278113, 2.40288840019684, 0.01, 0.3),
            (135.04222598541855, 2.739326471378762, 0.01, 0.3),
            (130.9135076485719, 3.438265730701684, 0.01, 0.3),
            (126.8614169017729, 4.494386828371097, 0.01, 0.3),
            (122.91679260232395, 5.899652045130379, 0.01, 0.3),
            (119.10965572297314, 7.643366464157658, 0.01, 0.3),
            (115.46898087418445, 9.712259365840584, 0.01, 0.3),
            (112.02247578985673, 12.090585225965654, 0.01, 0.3),
            (108.79637045473835, 14.760243548664906, 0.01, 0.3),
            (105.81521747840526, 17.700916622118825, 0.01, 0.3),
            (103.10170523507672, 20.890224148611487, 0.01, 0.3),
            (100.67648519138797, 24.30389357210973, 0.01, 0.3),
            (98.55801473625934, 27.915944807070794, 0.01, 0.3),
            (96.76241670902184, 31.69888796258045, 0.01, 0.3),
            (95.30335669487445, 35.62393255702173, 0.01, 0.3),
            (94.19193902152935, 39.66120663102424, 0.01, 0.3),
            (92.15433995373003, 47.0628757666955, 0.01, 0.3),
            (89.47939659445981, 54.25879085650453, 0.01, 0.3),
            (86.18746687785772, 61.194186641605576, 0.01, 0.3),
            (82.30360437678858, 67.81628057236753, 0.01, 0.3),
            (77.85736763002585, 74.07467451544764, 0.01, 0.3),
            (72.88259518392353, 79.9217383140175, 0.01, 0.3),
            (67.4171480606462, 85.31297228201636, 0.01, 0.3),
            (61.50262161292919, 90.20734587363165, 0.01, 0.3),
            (55.18402895832835, 94.56760995052763, 0.01, 0.3),
            (48.50945840221574, 98.36058027027966, 0.01, 0.3),
            (41.52970745673928, 101.55739003849634, 0.01, 0.3),
            (34.29789624108288, 104.13370960255503, 0.01, 0.3),
            (26.869063205284704, 106.06993161494896, 0.01, 0.3),
            (19.299746254399196, 107.35132025704098, 0.01, 0.3),
            (11.647552460901125, 107.96812338754117, 0.01, 0.3),
            (3.970719640079963, 107.9156467621905, 0.01, 0.3),
            (-3.672326874899454, 107.19428975979417, 0.01, 0.3),
            (-11.223418885060454, 105.80954234270764, 0.01, 0.3),
            (-18.62508802073171, 103.77194327490832, 0.01, 0.3),
            (-25.821003110540744, 101.09699991563812, 0.01, 0.3),
            (-32.75639889564178, 97.80507019903602, 0.01, 0.3),
            (-39.37849282640374, 93.92120769796688, 0.01, 0.3),
            (-45.63688676948385, 89.47497095120414, 0.01, 0.3),
            (-51.4839505680537, 84.50019850510184, 0.01, 0.3),
            (-54.673258094546355, 81.7866862617733, 0.01, 0.3),
            (-58.086927518044604, 79.36146621808453, 0.01, 0.3),
            (-61.69897875300566, 77.24299576295591, 0.01, 0.3),
            (-65.48192190851532, 75.4473977357184, 0.01, 0.3),
            (-69.4069665029566, 73.98833772157101, 0.01, 0.3),
            (-73.44424057695912, 72.87692004822593, 0.01, 0.3),
            (-77.56301803704693, 72.12160327526963, 0.01, 0.3),
            (-81.73195249976298, 71.72813581941709, 0.01, 0.3),
            (-85.91931585657451, 71.69951220558946, 0.01, 0.3),
            (-90.0932397439371, 72.03595027677137, 0.01, 0.3),
            (-94.22195808078374, 72.7348895360943, 0.01, 0.3),
            (-98.27404882758276, 73.7910106337637, 0.01, 0.3),
        ]

        road2.drivability = -1
        road2.improved_spline = 0
        road2.over_object = 1
        road2.break_angle = 180
        road2.render_priority = 9

        # Creation of Left side Boundary for the scenario.

        road3 = Road('strap', rid='boundary_1_l1', texture_length=16)
        road3.nodes = [
            (854.7590419968316, -299.53313581345355, 0.01, 0.3),
            (839.8285932774662, -298.3296707995771, 0.01, 0.3),
            (825.0598483102592, -295.82951098572244, 0.01, 0.3),
            (810.5652061620216, -292.0516840977104, 0.01, 0.3),
            (796.4549798116083, -287.0249416792737, 0.01, 0.3),
            (782.8365566015312, -280.78754027544596, 0.01, 0.3),
            (769.8135809554484, -273.38695027715625, 0.01, 0.3),
            (757.4851655815157, -264.879494642891, 0.01, 0.3),
            (745.9451371648282, -255.32992024696836, 0.01, 0.3),
            (735.2813222896962, -244.81090511673167, 0.01, 0.3),
            (725.5748790263071, -233.40250530887687, 0.01, 0.3),
            (716.8996792688073, -221.19154563452378, 0.01, 0.3),
            (709.3217465255783, -208.27095886997017, 0.01, 0.3),
            (702.8987534404785, -194.7390784821608, 0.01, 0.3),
            (697.6795828691943, -180.69889025161928, 0.01, 0.3),
            (693.7039558511937, -166.2572484884741, 0.01, 0.3),
            (691.002129308634, -151.52406280664957, 0.01, 0.3),
            (689.5946657729111, -136.61146164532133, 0.01, 0.3),
            (689.4921873573719, -121.61984092694169, 0.01, 0.3),
            (689.4182430216505, -110.80248558851187, 0.01, 0.3),
            (688.4004651361473, -100.00659991793142, 0.01, 0.3),
            (686.4456367685357, -89.3405010392577, 0.01, 0.3),
            (683.568635343051, -78.885364405324, 0.01, 0.3),
            (679.791356577722, -68.72075991889866, 0.01, 0.3),
            (675.1425478447361, -58.92404635767939, 0.01, 0.3),
            (669.657589385579, -49.56978262728441, 0.01, 0.3),
            (663.3782250460329, -40.729160322960944, 0.01, 0.3),
            (656.3522445803059, -32.469461918558544, 0.01, 0.3),
            (648.6331199421453, -24.85354870627701, 0.01, 0.3),
            (640.2795983309821, -17.9393823842759, 0.01, 0.3),
            (631.3552550902717, -11.77958393315343, 0.01, 0.3),
            (621.9280098607418, -6.421033138510644, 0.01, 0.3),
            (612.0696096709152, -1.904511807476182, 0.01, 0.3),
            (601.8550828989012, 1.7356066054706056, 0.01, 0.3),
            (591.3621682611349, 4.471618601243636, 0.01, 0.3),
            (580.6707231738047, 6.282701476505859, 0.01, 0.3),
            (569.8621159896963, 7.155071797014778, 0.01, 0.3),
            (559.0186067358964, 7.0820902978797005, 0.01, 0.3),
            (548.2227210653159, 6.064312412376524, 0.01, 0.3),
            (537.5566221866422, 4.1094840447649785, 0.01, 0.3),
            (527.1014855527084, 1.2324826192802605, 0.01, 0.3),
            (516.936881066283, -2.544796146048768, 0.01, 0.3),
            (507.1401675050639, -7.1936048790345986, 0.01, 0.3),
            (495.17268047233347, -12.874048709036112, 0.01, 0.3),
            (482.7679274894745, -17.485277607759365, 0.01, 0.3),
            (470.00848325716527, -20.997813928532484, 0.01, 0.3),
            (456.99145485037633, -23.384925149027147, 0.01, 0.3),
            (443.8159097151801, -24.628443911478197, 0.01, 0.3),
            (430.58212170566696, -24.71890628724621, 0.01, 0.3),
            (417.39080793936915, -23.655623803028924, 0.01, 0.3),
            (404.34236227918115, -21.446688680558744, 0.01, 0.3),
            (391.53609127544377, -18.10891224990914, 0.01, 0.3),
            (379.0694583831336, -13.667697005121948, 0.01, 0.3),
            (367.0373422061198, -8.156843275889036, 0.01, 0.3),
            (355.5199264659941, -1.611820536930344, 0.01, 0.3),
            (353.6995890415998, -0.5773740860888795, 0.01, 0.3),
            (351.7727240170872, 0.3064088719720715, 0.01, 0.3),
            (349.77616453559193, 1.018891416670355, 0.01, 0.3),
            (347.72510562032363, 1.5546511256321, 0.01, 0.3),
            (345.6351570680907, 1.9096105439715487, 0.01, 0.3),
            (343.52222464932106, 2.0810682161847813, 0.01, 0.3),
            (341.40238905554503, 2.067719245857284, 0.01, 0.3),
            (339.29178351562297, 1.8696652267135723, 0.01, 0.3),
            (337.2064710121322, 1.4884134694276192, 0.01, 0.3),
            (335.16232203237047, 0.9268655300784798, 0.01, 0.3),
            (333.17489378436443, 0.18929512755651268, 0.01, 0.3),
            (331.25931179712364, -0.7186843820179094, 0.01, 0.3),
            (329.43015480623086, -1.7901627263238964, 0.01, 0.3),
            (327.7013438008621, -3.0169853081849722, 0.01, 0.3),
            (326.08603607665276, -4.389815266977436, 0.01, 0.3),
            (318.65429459587557, -10.71285603047459, 0.01, 0.3),
            (310.71042170089436, -16.356530733364085, 0.01, 0.3),
            (302.30489898004294, -21.28637540768193, 0.01, 0.3),
            (293.50169753662067, -25.464870958734913, 0.01, 0.3),
            (284.3678150491294, -28.86021651233533, 0.01, 0.3),
            (274.98564932023356, -31.444208825054087, 0.01, 0.3),
            (265.38805202177326, -33.204252015018625, 0.01, 0.3),
            (255.68661893884033, -34.11988123092588, 0.01, 0.3),
            (245.94230039333684, -34.18649059517086, 0.01, 0.3),
            (236.22925653317452, -33.403573170271834, 0.01, 0.3),
            (226.62140948702535, -31.777087430570752, 0.01, 0.3),
            (217.19188077228725, -29.319411914645684, 0.01, 0.3),
            (208.01243479618446, -26.049251017157864, 0.01, 0.3),
            (199.1529326852961, -21.991492637114288, 0.01, 0.3),
            (190.66941265249451, -17.17054731622475, 0.01, 0.3),
            (182.78128381345235, -12.687946029245069, 0.01, 0.3),
            (174.50919065668853, -8.897972372805313, 0.01, 0.3),
            (165.93825734277834, -5.8433811335082115, 0.01, 0.3),
            (157.13371384951165, -3.547419595097436, 0.01, 0.3),
            (148.16256806920097, -2.0275614112197715, 0.01, 0.3),
            (139.09309583816034, -1.295373620369995, 0.01, 0.3),
            (134.58440089869276, -0.9319514138523141, 0.01, 0.3),
            (130.1374517736019, -0.1791397483048844, 0.01, 0.3),
            (125.77303649236252, 0.9583843955334217, 0.01, 0.3),
            (121.52437089057099, 2.4719637720721073, 0.01, 0.3),
            (117.42378987887113, 4.350079128331583, 0.01, 0.3),
            (113.5025013547607, 6.578436872413563, 0.01, 0.3),
            (109.79034869164681, 9.140077856366448, 0.01, 0.3),
            (106.31558361275482, 12.015506445541254, 0.01, 0.3),
            (103.1046511784558, 15.18283889214295, 0.01, 0.3),
            (100.18198852338847, 18.61796988376552, 0.01, 0.3),
            (97.56983887511011, 22.294755999373727, 0.01, 0.3),
            (95.28808226970301, 26.185214676523852, 0.01, 0.3),
            (93.35408425269682, 30.259737175559252, 0.01, 0.3),
            (91.78256371678073, 34.48731391999865, 0.01, 0.3),
            (90.58200439306668, 38.84839899915205, 0.01, 0.3),
            (88.63702346471278, 45.91362862865643, 0.01, 0.3),
            (86.07562804450659, 52.80736261971403, 0.01, 0.3),
            (82.92315100088527, 59.451623551341925, 0.01, 0.3),
            (79.20358458766852, 65.795844585936, 0.01, 0.3),
            (74.94523695119648, 71.7917423706776, 0.01, 0.3),
            (70.18051668824333, 77.39368450300276, 0.01, 0.3),
            (64.9456861970269, 82.55903682073935, 0.01, 0.3),
            (59.280585698462424, 87.2484878738244, 0.01, 0.3),
            (53.228330028025155, 91.42634810817597, 0.01, 0.3),
            (46.83498050581903, 95.06082148474967, 0.01, 0.3),
            (40.14919438211803, 98.12424746659471, 0.01, 0.3),
            (33.22185452631156, 100.5933115322421, 0.01, 0.3),
            (26.105682177544466, 102.4492226132906, 0.01, 0.3),
            (18.85483570425321, 103.6778561057837, 0.01, 0.3),
            (11.524498426280331, 104.26986136697434, 0.01, 0.3),
            (4.170458636489882, 104.22073287936227, 0.01, 0.3),
            (-3.151314981827199, 103.53084454040288, 0.01, 0.3),
            (-10.38509931042773, 102.2054468169216, 0.01, 0.3),
            (-17.475840882692676, 100.25462678589108, 0.01, 0.3),
            (-24.369574873750263, 97.69323136568488, 0.01, 0.3),
            (-31.01383580537816, 94.54075432206356, 0.01, 0.3),
            (-37.35805683997225, 90.82118790884681, 0.01, 0.3),
            (-43.35395462471384, 86.56284027237477, 0.01, 0.3),
            (-48.95589675703894, 81.79812000942164, 0.01, 0.3),
            (-52.401003829700414, 78.86696955008503, 0.01, 0.3),
            (-56.07778994530861, 76.25481990180668, 0.01, 0.3),
            (-59.9682486224587, 73.97306329639959, 0.01, 0.3),
            (-64.04277112149416, 72.03906527939337, 0.01, 0.3),
            (-68.2703478659335, 70.4675447434773, 0.01, 0.3),
            (-72.61880444407093, 69.27046190883975, 0.01, 0.3),
            (-77.05504647567699, 68.45692729867068, 0.01, 0.3),
            (-81.54531148021474, 68.03313240257913, 0.01, 0.3),
            (-86.05542582970375, 68.00230255561868, 0.01, 0.3),
            (-90.55106483066292, 68.36467239154031, 0.01, 0.3),
            (-94.99801395575385, 69.11748405708775, 0.01, 0.3),
            (-99.35009054235405, 70.25061256345077, 0.01, 0.3),
        ]

        road3.drivability = -1
        road3.improved_spline = 0
        road3.over_object = 1
        road3.break_angle = 180
        road3.render_priority = 9

        # Creation of Right side Boundary for the scenario.

        road4 = Road('strap', rid='boundary_1_r1', texture_length=16)
        road4.nodes = [
            (869.3773230309554, -292.0395093410404, 0.01, 0.3),
            (855.0443599199521, -292.13862697950225, 0.01, 0.3),
            (840.7572993894263, -290.98816739971096, 0.01, 0.3),
            (826.6248745967787, -288.5968862937354, 0.01, 0.3),
            (812.7546418280723, -284.98298275468693, 0.01, 0.3),
            (799.252161929753, -280.1739607706323, 0.01, 0.3),
            (786.2201969268668, -274.2064199026371, 0.01, 0.3),
            (773.7579279420017, -267.1257767400065, 0.01, 0.3),
            (761.9602003670561, -258.98591925261724, 0.01, 0.3),
            (750.916802032538, -249.84879667092878, 0.01, 0.3),
            (740.7117798679592, -239.78394801493312, 0.01, 0.3),
            (731.4228002539531, -228.8679728602243, 0.01, 0.3),
            (723.1205579342218, -217.18394836897562, 0.01, 0.3),
            (715.868237985849, -204.82079702257226, 0.01, 0.3),
            (709.7210349427125, -191.87260986783542, 0.01, 0.3),
            (704.7257327317533, -178.43793042734166, 0.01, 0.3),
            (700.9203486190427, -164.61900472371445, 0.01, 0.3),
            (698.3338438754321, -150.52100312565386, 0.01, 0.3),
            (696.9859033637947, -136.2512199379272, 0.01, 0.3),
            (696.8867857253329, -121.91825682692374, 0.01, 0.3),
            (696.8081603213167, -110.4161055725537, 0.01, 0.3),
            (695.7285863321375, -98.97761646348887, 0.01, 0.3),
            (693.6561904337082, -87.67674533173755, 0.01, 0.3),
            (690.6067448101618, -76.59949863026111, 0.01, 0.3),
            (686.6034575840005, -65.83018089508728, 0.01, 0.3),
            (681.6767961882653, -55.45075313686933, 0.01, 0.3),
            (675.8642554909765, -45.54020906811656, 0.01, 0.3),
            (669.2100724365503, -36.17397391334455, 0.01, 0.3),
            (661.7648893759363, -27.423330377568536, 0.01, 0.3),
            (653.5853686477477, -19.354876141875973, 0.01, 0.3),
            (644.7337613436588, -12.030017014869339, 0.01, 0.3),
            (635.2774335399993, -5.504499597375101, 0.01, 0.3),
            (625.2883536012405, 0.1720129828454515, 0.01, 0.3),
            (614.8425444572891, 4.956319037483773, 0.01, 0.3),
            (604.019505023083, 8.812007108621215, 0.01, 0.3),
            (592.9016051638451, 11.709733081908597, 0.01, 0.3),
            (581.5734588106767, 13.62744351299422, 0.01, 0.3),
            (570.1212799974465, 14.550543467552414, 0.01, 0.3),
            (558.6322267199381, 14.472007597545916, 0.01, 0.3),
            (547.1937376108735, 13.392433608366808, 0.01, 0.3),
            (535.8928664791215, 11.320037709937322, 0.01, 0.3),
            (524.8156197776462, 8.270592086391233, 0.01, 0.3),
            (514.0463020424713, 4.267304860229461, 0.01, 0.3),
            (503.65504132453657, -0.6649731250897255, 0.01, 0.3),
            (492.3062118580076, -6.051767206802257, 0.01, 0.3),
            (480.50696766519775, -10.439127745200098, 0.01, 0.3),
            (468.3702394924049, -13.781421160683637, 0.01, 0.3),
            (455.9883951693809, -16.053210582229102, 0.01, 0.3),
            (443.45566800778596, -17.237206320594577, 0.01, 0.3),
            (430.8674396287873, -17.32439745329492, 0.01, 0.3),
            (418.3195140513293, -16.31412040316285, 0.01, 0.3),
            (405.907388565701, -14.21406398857182, 0.01, 0.3),
            (393.72552694149437, -11.040210906885607, 0.01, 0.3),
            (381.8666405012787, -6.816716096480716, 0.01, 0.3),
            (370.42098253145554, -1.5757229030802349, 0.01, 0.3),
            (359.4756614002523, 4.642881550515844, 0.01, 0.3),
            (357.05993278209843, 6.015672035267234, 0.01, 0.3),
            (354.54565880346155, 7.167239716931958, 0.01, 0.3),
            (351.9405866597737, 8.095291919820955, 0.01, 0.3),
            (349.26454252303387, 8.792765606297019, 0.01, 0.3),
            (346.5378927049625, 9.254352580459903, 0.01, 0.3),
            (343.7813886570711, 9.47653988672239, 0.01, 0.3),
            (341.0160090395869, 9.45763654552347, 0.01, 0.3),
            (338.2628000611807, 9.19778642270381, 0.01, 0.3),
            (335.54271530461125, 8.698967134599862, 0.01, 0.3),
            (332.87645625730835, 7.964974997189462, 0.01, 0.3),
            (330.2843147605526, 7.001396133834704, 0.01, 0.3),
            (327.7860185763131, 5.815563961510899, 0.01, 0.3),
            (325.4005812470634, 4.416503379074083, 0.01, 0.3),
            (323.14615739124594, 2.814862082332517, 0.01, 0.3),
            (321.0299284546232, 1.0143417243829431, 0.01, 0.3),
            (314.11976214722245, -4.864934802828888, 0.01, 0.3),
            (306.7028244353466, -10.135652067949414, 0.01, 0.3),
            (298.85473713264463, -14.739883947411444, 0.01, 0.3),
            (290.6352289222948, -18.642589456501064, 0.01, 0.3),
            (282.10685522485267, -21.814066649776066, 0.01, 0.3),
            (273.30901017096807, -24.236017773481965, 0.01, 0.3),
            (264.3849923407778, -25.872537448220584, 0.01, 0.3),
            (255.3263772314462, -26.728643640042257, 0.01, 0.3),
            (246.22761831645718, -26.791981761219567, 0.01, 0.3),
            (237.1579626451347, -26.062069770405753, 0.01, 0.3),
            (228.18643577354524, -24.54446273858382, 0.01, 0.3),
            (219.38131643833776, -22.250710571622104, 0.01, 0.3),
            (210.80961691432955, -19.198270108516617, 0.01, 0.3),
            (202.536573010632, -15.41037226430554, 0.01, 0.3),
            (194.62514758675272, -10.915845228778563, 0.01, 0.3),
            (186.14162755395117, -6.094899907889024, 0.01, 0.3),
            (177.2821254430628, -2.0371415278454306, 0.01, 0.3),
            (168.10267946695998, 1.2330193696424128, 0.01, 0.3),
            (158.6731507522219, 3.6906948855674844, 0.01, 0.3),
            (149.0653037060727, 5.317180625268583, 0.01, 0.3),
            (139.33920390740192, 6.101150420763675, 0.01, 0.3),
            (135.5131070106529, 6.40955198601377, 0.01, 0.3),
            (131.70247806012176, 7.053484943682052, 0.01, 0.3),
            (127.96247215841305, 8.027085738556996, 0.01, 0.3),
            (124.32155300871601, 9.322944680713377, 0.01, 0.3),
            (120.80743020420694, 10.931199501140357, 0.01, 0.3),
            (117.44684834131354, 12.839610409563678, 0.01, 0.3),
            (114.26538347718721, 15.033653246640226, 0.01, 0.3),
            (111.28724848046498, 17.496630021580557, 0.01, 0.3),
            (108.53510875671898, 20.20979599394135, 0.01, 0.3),
            (106.0299097510343, 23.152502332418518, 0.01, 0.3),
            (103.79071754052472, 26.302353264921592, 0.01, 0.3),
            (101.83457372997346, 29.63537652392223, 0.01, 0.3),
            (100.17636575493074, 33.12620578988496, 0.01, 0.3),
            (98.82871357933998, 36.74827374427548, 0.01, 0.3),
            (97.80187364999202, 40.47401426289643, 0.01, 0.3),
            (95.67513293182374, 48.19949440371859, 0.01, 0.3),
            (92.88772905078484, 55.69794164352571, 0.01, 0.3),
            (89.45739934441404, 62.924916772152535, 0.01, 0.3),
            (85.4102506930664, 69.82541814510357, 0.01, 0.3),
            (80.77708434171412, 76.3469287802936, 0.01, 0.3),
            (75.59316148387303, 82.43981604399337, 0.01, 0.3),
            (69.89793490262969, 88.05770938514006, 0.01, 0.3),
            (63.734748711139126, 93.15785324323086, 0.01, 0.3),
            (57.15050847775217, 97.70143244395462, 0.01, 0.3),
            (50.19532424631765, 101.6538676061058, 0.01, 0.3),
            (42.922129168492326, 104.98507831155459, 0.01, 0.3),
            (35.38627665049318, 107.66971203539273, 0.01, 0.3),
            (27.645119080254787, 109.68733709395552, 0.01, 0.3),
            (19.757571341125047, 111.02259814227205, 0.01, 0.3),
            (11.783662434030362, 111.66533303751196, 0.01, 0.3),
            (3.784078620531738, 111.61065017902848, 0.01, 0.3),
            (-4.180298436269403, 110.85896573639313, 0.01, 0.3),
            (-12.048855017948636, 109.4160004820938, 0.01, 0.3),
            (-19.761706657754804, 107.29273625300202, 0.01, 0.3),
            (-27.260153897561942, 104.5053323719631, 0.01, 0.3),
            (-34.48712902618873, 101.07500266559232, 0.01, 0.3),
            (-41.38763039913971, 97.0278540142447, 0.01, 0.3),
            (-47.90914103432978, 92.39468766289238, 0.01, 0.3),
            (-54.01200437906845, 87.20227700078203, 0.01, 0.3),
            (-56.93553627835339, 84.71489077773086, 0.01, 0.3),
            (-60.08538721085646, 82.4756985672213, 0.01, 0.3),
            (-63.4184104698571, 80.51955475667002, 0.01, 0.3),
            (-66.90923973581984, 78.8613467816273, 0.01, 0.3),
            (-70.53130769021034, 77.51369460603652, 0.01, 0.3),
            (-74.2570482088313, 76.48685467668858, 0.01, 0.3),
            (-78.05810615667237, 75.78864186546872, 0.01, 0.3),
            (-81.90555318760892, 75.42436999346275, 0.01, 0.3),
            (-85.77010790658349, 75.39681138956998, 0.01, 0.3),
            (-89.62235871870277, 75.70617579140638, 0.01, 0.3),
            (-93.43298766923388, 76.35010874907466, 0.01, 0.3),
            (-97.19800711281145, 77.33140870407664, 0.01, 0.3),
            (-102.45750617874337, 79.20509565975568, 0.01, 0.3),
        ]

        road4.drivability = -1
        road4.improved_spline = 0
        road4.over_object = 1
        road4.break_angle = 180
        road4.render_priority = 9

        # Adding Main Road in the sceanrio
        scenario.add_road(road4)

        # Adding Divider in the sceanrio
        scenario.add_road(road3)

        # Adding Left Boundary in the sceanrio
        scenario.add_road(road2)

        # Adding Rigt Boundary in the sceanrio
        scenario.add_road(road)

        scenario.make(bng)
        bng.open()
        bng.load_scenario(scenario)
        bng.start_scenario()

        config_trans = vehicle1.get_part_config()
        config_trans['parts']['van_transmission'] = x[2]
        set_config_trans = vehicle1.set_part_config(config_trans)

        if (x[2] == 'van_transmission_5M'):
            trans_mission = 'transmission2'
        elif (x[2] == 'van_transmission_4A'):
            trans_mission = 'transmission1'
        else:
            trans_mission = 'transmission3'

        config_tire = vehicle1.get_part_config()
        config_tire['parts']['tire_R_16x8_alt'] = x[1]
        set_config_tire = vehicle1.set_part_config(config_tire)

        if (x[1] == 'tire_R_225_75_16_heavy'):
            tire_main = 'tire3'
        elif (x[1] == 'tire_R_225_75_16_standard'):
            tire_main = 'tire2'
        else:
            tire_main = 'tire1'

        config_brake = vehicle1.get_part_config()
        config_brake['parts']['brakepad_R'] = x[0]
        set_config_brake = vehicle1.set_part_config(config_brake)

        if (x[0] == 'brakepad_R'):
            brake_main = 'brake1'
        elif (x[0] == 'brakepad_R_race'):
            brake_main = 'brake3'
        else:
            brake_main = 'brake2'

        config = vehicle1.get_part_config()
        print(config)

        vehicle1.ai_set_speed(car_speed, 'set')
        if car_speed == 9:
            car_speed_km = 30
        elif car_speed == 10:
            car_speed_km = 35
        elif car_speed == 11:
            car_speed_km = 40
        elif car_speed == 13:
            car_speed_km = 45
        elif car_speed == 14:
            car_speed_km = 50
        elif car_speed == 16:
            car_speed_km = 55
        elif car_speed == 17:
            car_speed_km = 60
        elif car_speed == 19:
            car_speed_km = 65
        elif car_speed == 20:
            car_speed_km = 70
        elif car_speed == 22:
            car_speed_km = 75
        else:
            car_speed_km = 80
        vehicle1.ai_set_mode('span')
        vehicle1.ai_drive_in_lane(True)

        positions = list()
        directions = list()
        distance = list()

        for index in range(100000):
            time.sleep(0.1)

            #vehicle1 = scenario.get_vehicle('ego_vehicle')
            vehicle1.update_vehicle()  # Synchs the vehicle's "state" variable with the simulator
            sensors = bng.poll_sensors(vehicle1)

            #vehicle2 = scenario.get_vehicle('green_vehicle')
            vehicle2.update_vehicle()
            sensors = bng.poll_sensors(vehicle2)

            ispass = -1

            # Collecting position and direction for the vehicles in the scenario.
            directions.append(vehicle1.state['dir'])
            direction_car = geometry.Point(vehicle1.state['dir'])
            # display(vehicle1.state['dir'])
            newdirection_road = geometry.Point(vehicle1.state['dir'])
            positions.append(vehicle1.state['pos'])
            # display(vehicle1.state['pos'])
            positions.append(vehicle2.state['pos'])
            # display(vehicle2.state['pos'])

            vehiclepos = vehicle1.state['pos']
            vehiclepos2 = vehicle2.state['pos']

            newposition_Vehicle1 = geometry.Point(vehicle1.state['pos'])
            newposition_Vehicle2 = geometry.Point(vehicle2.state['pos'])

            vehicle_distance1 = newposition_Vehicle2.distance(
                newposition_Vehicle1)
            print('distance', vehicle_distance1)

            if (vehicle_distance1 <= 20 and car_speed_km == 30) or (vehicle_distance1 <= 20 and car_speed_km == 35) or (vehicle_distance1 <= 25 and car_speed_km == 40):
                vehicle1.ai_set_mode('stopping')
                time.sleep(5)

                if (vehicle_distance1 > 18):
                    ispass = 1
                    print('pass')
                else:
                    ispass = 0
                    print('fail')

                if (ispass == 1 or ispass == 0):
                    path_dir = os.getcwd()
                    file_name_csv = (path_dir + '\dataset_van_new.csv')
                    #fileEmpty = os.stat(file_name_csv).st_size == 0
                    v = random.randint(0, 100)
                    # with open(r'C:\Users\hamza\OneDrive\Desktop\Boundary\datset.csv', 'a') as f:
                    with open(file_name_csv, 'a') as f:
                        headers = ['Brake', 'Transmission',
                                   'Tire', 'Speed', 'Car_model', 'Result']
                        writer = csv.DictWriter(
                            f, delimiter=',', lineterminator='\n', fieldnames=headers)
                        fileEmpty = os.stat(file_name_csv).st_size == 0
                        if fileEmpty:
                            writer.writeheader()
                        writer.writerow({'Tire': tire_main, 'Brake': brake_main, 'Transmission': trans_mission,
                                         'Car_model': 'etk800', 'Speed': car_speed_km, 'Result': ispass})
                break
            elif (vehicle_distance1 < 20 and car_speed_km == 45) or (vehicle_distance1 <= 25 and car_speed_km == 50) or (vehicle_distance1 <= 25 and car_speed_km == 55):
                vehicle1.ai_set_mode('stopping')
                print(vehicle_distance1)
                time.sleep(5)

                if (vehicle_distance1 > 19):
                    print(vehiclepos)
                    print(vehiclepos2)

                    ispass = 1
                    print('pass')
                else:
                    ispass = 0
                    print('fail')

                if (ispass == 1 or ispass == 0):
                    path_dir = os.getcwd()
                    file_name_csv = (path_dir + '\dataset_van_new.csv')
                    v = random.randint(0, 100)
                    # with open(r'C:\Users\hamza\OneDrive\Desktop\Boundary\datset.csv', 'a') as f:
                    with open(file_name_csv, 'a') as f:
                        headers = ['Brake', 'Transmission',
                                   'Tire', 'Speed', 'Car_model', 'Result']
                        writer = csv.DictWriter(
                            f, delimiter=',', lineterminator='\n', fieldnames=headers)
                        fileEmpty = os.stat(file_name_csv).st_size == 0
                        if fileEmpty:
                            writer.writeheader()
                        writer.writerow({'Tire': tire_main, 'Brake': brake_main, 'Transmission': trans_mission,
                                         'Car_model': 'etk800', 'Speed': car_speed_km, 'Result': ispass})
                break
            elif (vehicle_distance1 <= 20 and car_speed_km == 60) or (vehicle_distance1 <= 20 and car_speed_km == 65) or (vehicle_distance1 <= 20 and car_speed_km == 70):
                vehicle1.ai_set_mode('stopping')
                time.sleep(5)

                if (vehicle_distance1 > 19):
                    ispass = 1
                    print('pass')
                else:
                    ispass = 0
                    print('fail')

                if (ispass == 1 or ispass == 0):
                    path_dir = os.getcwd()
                    file_name_csv = (path_dir + '\dataset_van_new.csv')
                    v = random.randint(0, 100)
                    # with open(r'C:\Users\hamza\OneDrive\Desktop\Boundary\datset.csv', 'a') as f:
                    with open(file_name_csv, 'a') as f:
                        headers = ['Brake', 'Transmission',
                                   'Tire', 'Speed', 'Car_model', 'Result']
                        writer = csv.DictWriter(
                            f, delimiter=',', lineterminator='\n', fieldnames=headers)
                        fileEmpty = os.stat(file_name_csv).st_size == 0
                        if fileEmpty:
                            writer.writeheader()
                        writer.writerow({'Tire': tire_main, 'Brake': brake_main, 'Transmission': trans_mission,
                                         'Car_model': 'etk800', 'Speed': car_speed_km, 'Result': ispass})
                break
            elif (vehicle_distance1 <= 20 and car_speed_km == 75) or (vehicle_distance1 <= 20 and car_speed_km == 80):
                vehicle1.ai_set_mode('stopping')
                time.sleep(5)

                if (vehicle_distance1 > 19):
                    ispass = 1
                    print('pass')
                else:
                    ispass = 0
                    print('fail')

                if (ispass == 1 or ispass == 0):
                    path_dir = os.getcwd()
                    file_name_csv = (path_dir + '\dataset_van_new.csv')
                    v = random.randint(0, 100)
                    # with open(r'C:\Users\hamza\OneDrive\Desktop\Boundary\datset.csv', 'a') as f:
                    with open(file_name_csv, 'a') as f:
                        headers = ['Brake', 'Transmission',
                                   'Tire', 'Speed', 'Car_model', 'Result']
                        writer = csv.DictWriter(
                            f, delimiter=',', lineterminator='\n', fieldnames=headers)
                        fileEmpty = os.stat(file_name_csv).st_size == 0
                        if fileEmpty:
                            writer.writeheader()
                        writer.writerow({'Tire': tire_main, 'Brake': brake_main, 'Transmission': trans_mission,
                                         'Car_model': 'etk800', 'Speed': car_speed_km, 'Result': ispass})
                break

        bng.stop_scenario()
        bng.close()
